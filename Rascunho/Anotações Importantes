OBS: ANTES DA EXECU√á√ÉO 
1. Instalar a biblioteca 'plyer'
pip install plyer
ou Instalar o plyer usando o python -m pip: python -m pip install plyer

%% Se o m√≥dulo plyer ainda estiver dando erro fa√ßa estes passos:
% Abra a paleta de comandos (Command Palette) no VSCode Windows/Linux: Ctrl+Shift+P
% Pesquise e selecione: Python: Select Interpreter
% Escolha o ambiente Python em que voc√™ instalou o plyer (por exemplo, venv, conda ou o global Python).
% Verifique a instala√ß√£o do plyer no ambiente correto : python -m pip show plyer 

2. Criar e ativar um ambiente virtual
Criar python -m venv venv
Ativar no windows √© .\venv\Scripts\activate

Instale o plyer dentro do ambiente virtual: pip install plyer

# Para executar o servidor Uvicorn e o FastAPI:
-> Instalar as depend√™ncias:
pip install fastapi uvicorn plyer

%% Se aparecer "ERROR: Error loading ASGI app. Could not import module "Prototipo_1". fa√ßa estes passos:
1. Caminho Correto: Certifique-se de que est√° executando o comando na raiz do projeto, onde Protipo_1.py Teste.py est√£o localizados.
2. Ambiente Virtual: Se voc√™ estiver usando um ambiente virtual, assegure-se de que ele esteja ativado. Voc√™ deve ver (venv) ou algo semelhante
no seu terminal. Se n√£o estiver ativo, ative-o para garantir que todas as bibliotecas estejam acess√≠veis: .\venv\Scripts\activate

Para iniciar o seu servidor Uvicorn a partir do arquivo modelos.py, use o comando: uvicorn modelos:app --reload

-> Executar a API
uvicorn nome_do_arquivo:app --reload
Neste caso √© uvicorn Teste:app --reload

app: Este √© o nome da vari√°vel que representa a aplica√ß√£o FastAPI dentro do arquivo Teste.py.
--reload: Isso ativa o modo de recarregamento autom√°tico, o que significa que sempre que voc√™ fizer mudan√ßas no seu c√≥digo, o servidor ser√° 
reiniciado automaticamente.

# An√°lise de Complexidade:
üìä Complexidade e Escalabilidade
Opera√ß√£o	          Complexidade
Inser√ß√£o (heapq)	    O(log n)
Remo√ß√£o (heapq)	      O(log n)
Lista Ordenada 	   Inser√ß√£o: O(n), Remo√ß√£o: O(1)
Lista Desordenada	 Inser√ß√£o: O(1), Remo√ß√£o: O(n)

Obs: Com heapq, o sistema continua eficiente mesmo com milhares de chamados. A heap mant√©m a fila ordenada por prioridade e timestamp sem 
precisar reordenar todos os elementos a cada inser√ß√£o.


    GET: Para recuperar informa√ß√µes.
    POST: Para criar um novo registro.
    PUT: Para atualizar um registro existente.
    DELETE: Para deletar um registro existente.

# No arquivo Teste.py
Para o GET na Raiz: 
Endere√ßo da Requisi√ß√£o: GET http://127.0.0.1:8000/

Para Adicionar Itens com POST:
Endere√ßo da Requisi√ß√£o: POST http://127.0.0.1:8000/itens/

Deve usar o GET em http://127.0.0.1:8000/ para acessar a rota que voc√™ definiu como @app.get("/").
Deve usar o POST em http://127.0.0.1:8000/itens/ para chamar a rota definida como @app.post("/itens/").

